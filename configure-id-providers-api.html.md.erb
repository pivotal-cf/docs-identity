---
title: Updating Identity Providers with UAAC
owner: Identity Service
---

This topic describes how to update the configuration of identity providers
using the User Account and Authentication Command Line Interface (UAAC).

For instructions on configuring identity providers, see [Configuring Identity Providers](./configure-internal-us.html).

## <a id="creating"></a> Create a UAA Identity Zone Admin Client

<%#-- This partial is for the Updating Service Plans with UAAC (manage-service-plans-api.html)
and Updating Identity Providers with UAAC (configure-id-providers-api.html) topics. Before editing
make sure the partial makes sense in both contexts.
The if statements in this partial change the scopes needed depending on the topic title.
%>
<p>
To use the UAAC with your <%= vars.product_full %> service plan, you need an identity zone admin client. To create
the identity zone admin client, you need to create a UAA admin client that corresponds to your <%= vars.product_short %>
service plan.
</p>

### <a id="admin"></a> Create an Admin Client

To create a UAA admin client:

1. Follow the procedure in [Create an Admin Client](./manage-clients-api.html#creating).

<% if current_page.data.title == "Updating Identity Providers with UAAC" %>
2. Using the instructions above, give the admin client the `idps.read`, `idps.write` and,
`clients.admin` scopes.
<% end %>

<% if current_page.data.title == "Updating Service Plans with UAAC" %>
2. Using the instructions above, give the admin client the `clients.admin` scope.
<%end%>

3. Record the **App ID** and **App Secret**. You need these for the procedure below.

###  <a id="zone-admin"></a> Create a UAA Identity Zone Admin Client

To create a UAA identity zone admin client:

1. Install the UAAC as follows:

    ```
    gem install cf-uaac
    ```

    For information about the UAAC,
    see [the UAAC Github Repository](https://github.com/cloudfoundry/cf-uaac).

1. Use the UAAC to target your service plan:

    ```
    uaac target MY-AUTH-DOMAIN.login.example.com
    ```

    Where `MY-AUTH-DOMAIN` is the **Auth Domain** you entered when you created the <a href="./manage-service-plans.html#create-svc-plan">Service Plan</a>.

1. Run the command below to authenticate and obtain
an access token for the admin client for your service plan. UAAC stores the token in `~/.uaac.yml`.


    ```
    uaac token client get MY-APP-ID -s MY-APP-SECRET
    ```

    Where:<br>
    * `MY-APP-ID` is your admin app ID.
    * `MY-APP-SECRET` is your app secret.<br>

    Use the **App ID** and **App Secret** provided when you created the admin client in the
    procedure above.

<% if current_page.data.title == "Updating Identity Providers with UAAC" %>
1. Run the following command to display your client context and verify that you have `idps.read`, `idps.write`, and `clients.admin` under the scope section.

    ```
    uaac context
    ```

    For example:
    <pre class="terminal">
    $ uaac context
    [1]*[ExampleAppID]
      client\_id: ExampleAppID
        access\_token: aBcdEfg0hIJKlm123.e
        token\_type: bearer
        expires\_in: 43200
        scope: uaa.resource idps.read idps.write clients.admin
        jti: 91b3-abcd1233
    </pre>
<% end %>

<% if current_page.data.title == "Updating Service Plans with UAAC" %>
1. Run the following command to display your client context and verify that you have `clients.admin`
under the scope section.

    ```
    uaac context
    ```

    For example:
    <pre class="terminal">
    $ uaac context
    [1]*[ExampleAppID]
      client\_id: ExampleAppID
        access\_token: aBcdEfg0hIJKlm123.e
        token\_type: bearer
        expires\_in: 43200
        scope: uaa.resource clients.admin
        jti: 91b3-abcd1233
    </pre>
<% end %>

1. Run the following command to create an identity zone admin client. <br>

    ```
    uaac client add ZONE-ADMIN-CLIENT-ID --authorized_grant_types client_credentials --authorities uaa.admin
    ```
    Where `ZONE-ADMIN-CLIENT-ID` is an ID you want to use to identify this zone admin client.<br><br>

    When prompted for a `New client secret`, provide a client secret for this
    identity zone admin client.
    Ensure you use a secure value for your client secret. <br><br>

    For example:
    <pre class="terminal">
    $ uaac client add ExampleZoneAdminClientID --authorized\_grant\_types client\_credentials --authorities uaa.admin
    New client secret:  *****
    Verify new client secret:  *****
    </pre>

    Record the values you provide for `ZONE-ADMIN-CLIENT-ID` and `New client secret`.<br><br>

    You can delete the original admin client created through the <%= vars.operator_dash %> after you create the identity zone client.

1. Run the following command to authenticate and obtain an access token for the
identity zone admin client for your service plan.

    ```
    uaac token client get ZONE-ADMIN-CLIENT-ID
    ```

    Where `ZONE-ADMIN-CLIENT-ID` is zone admin client ID you provided in the previous step.<br><br>
    When prompted for a `Client secret`, use the client secret you provided in the previous step.

    For example:
    <pre class="terminal">
    $ uaac token client get ExampleZoneAdminClientID
    Client secret:  *****
    </pre>

1. Use the following command to display your client context and verify that you have `uaa.admin`
under the scope section.

    ```
    uaac context
    ```

    For example:
    <pre class="terminal">
    $ uaac context
    [1]*[ExampleZoneAdminClientID]
      client\_id: ExampleZoneAdminClientID
        access\_token: asdioqwuelk12312.e21e
        token\_type: bearer
        expires\_in: 43200
        scope: uaa.admin
        jti: 123908dkl1-23298
    </pre>
    <p>
    You can now do operator level API configurations for the <%= vars.product_short %> service plan.
    You do not have permissions for any other <%= vars.product_short %> service plan.
    </p>

## <a id="updating"></a> Update UAA Identity Provider Configurations with the API

This section shows how to use the UAAC to update UAA identity provider configurations, using a `PUT` command.

<p class="note warning"><strong>WARNING</strong>: This flow is for advanced users only.
  You must always run the <code>PUT</code> command
  with the latest data by doing a <code>GET</code> before the <code>PUT</code> command.
  You must also provide all configuration values, otherwise, data can be lost.</p>

For general information about UAAC, see the [CF UAA API documentation page](https://docs.cloudfoundry.org/api/uaa).

To make UAA identity provider API calls, do the following:

1. Create an identity zone admin client following [Create a UAA Identity Zone Admin Client](#creating) above.

1. To retrieve your identity provider ID, run the following command: <br>

    ```
    uaac curl -k /identity-providers > ID-TEXT.txt
    ```
    Where:
      * `YOUR-IDENTITY-PROVIDER-ID` is your identity provider ID.
      * `ID-TEXT.txt` is the name of your text file.

    The command above outputs a JSON blob similar to the example below.

    <pre>
      {
        "type" : "uaa",
        "config" : "null",
        "id" : "4be9d903-b6ce-4a57-9c56-94e731b58628",
        "originKey" : "uaa",
        "name" : "uaa",
        "version" : 3,
        "created" : 946684800000,
        "last_modified" : 1538589026045,
        "active" : true,
        "identityZoneId" : "uaa"
    </pre>
    Your identity provider ID is the value of `id`. In most cases, this command returns one
    identity provider. If there are several, you can identify your identity provider by the `name`.

1. Run the following command, directing the output to a text file:

    ```
    uaac curl -k /identity-providers/YOUR-IDENTITY-PROVIDER-ID > JSON-BLOB.txt
    ```

    Where:
      * `YOUR-IDENTITY-PROVIDER-ID` is the identity provider ID retrieved in the above step.
      * `JSON-BLOB.txt` is the name of your text file.

3. The command above outputs a JSON blob similar
to the example below. Confirm that the ID in this output matches `YOUR-IDENTITY-PROVIDER-ID`.

	<pre>
	{
      "type": "uaa",
      "config": "{"emailDomain\":null,
      \"additionalConfiguration\":null,
      \"providerDescription\":null,
      \"passwordPolicy\":null,
      \"lockoutPolicy\":null,
      \"disableInternalUserManagement\":false}",
      "id": "b38dfbbc-f187-4eeb-a3f3-21a3c72c6975",
      "originKey": "uaa",
      "name": "uaa",
      "version": 0,
      "created": 1530220213000,
      "last_modified": 1530220213000,
      "active": true,
      "identityZoneId": "uaa"
    }
	</pre>

4. In your `JSON-BLOB.txt`, update the configurations in the JSON blob as needed, and then save the file.
  <p class="note warning"><strong>Warning:</strong> You must provide all <code>config</code> values, otherwise,
    data can be lost when doing an API update as a <code>PUT</code> command.</p>

5. Submit a UAAC curl request to apply your updated configurations to the identity provider, as shown below.
    <p class="note warning"><strong>Warning:</strong> You must always run this command with the latest data by doing a <code>GET</code> before the below <code>PUT</code> command.</p>

    ```
    $ uaac curl -k /identity-providers/YOUR-IDENTITY-PROVIDER-ID -X PUT
    \-H 'Content-Type: application/json' -d "$(cat file.txt)"
    ```
    Where:
    * `YOUR-IDENTITY-PROVIDER-ID` is the identity provider ID retrieved in the above step.

     A minimal example command would look similar to the following:

     <pre class="terminal">$ uaac curl -k /identity-providers/b38dfbbc-f187-4eeb-a3f3-21a3c72c6975\
         -X PUT \
         -H 'Content-Type: application/json' \
         -d '{
             "type": "uaa",
             "config": {
                 "emailDomain": null,
                 "providerDescription": null,
                 "passwordPolicy": null,
                 "lockoutPolicy": {
                     "lockoutPeriodSeconds": 8,
                     "lockoutAfterFailures": 8,
                     "countFailuresWithin": 8
                 },
                 "disableInternalUserManagement": false
             },
             "originKey": "uaa",
             "name": "uaa",
             "version": 0,
             "active": true
             }'
     </pre>

   For a full list of UAA API update parameters,
   see the [Identity Providers Update Documentation](http://docs.cloudfoundry.org/api/uaa/version/4.24.0/index.html#update).

### <a id="enable-client-auth"></a> Enable Client Auth for OpenID Connect (OIDC)

Some OIDC providers only support client secrets via POST instead of via basic authentication.

<p class="note"><strong>Note</strong>: Azure Active Directory integrations using
   the response type of code only work with <code>clientAuthInBody</code>.</p>

To enable client authentication via POST, do the following:

1. Follow the steps 1-4 in [Update UAA Identity Provider Configurations with the API](#updating) above.

1. In step 5, add the following line to the config section in the JSON blob:

    ```
    "clientAuthInBody": true
    ```

1. Complete the procedure by following step 6.

For more information about client authentication,
see [OAuth/OIDC](http://docs.cloudfoundry.org/api/uaa/version/4.24.0/index.html#oauth-oidc)
in the UAA API documentation.

### <a id="enable-password"></a> Enable Password Grant for OpenID Connect (OIDC)

You can enable OIDC password grant to permit native apps to forward credentials to an enterprise identity provider for authentication.

To enable OIDC password grant, do the following:

1. Follow the steps 1-4 in [Update UAA Identity Provider Configurations with the API](#updating) above.

1. In step 5, add the following line to the config section in the JSON blob:

    ```
    "passwordGrantEnabled": true
    ```

1. Complete the procedure by following step 6.

For more information about OIDC password grant,
see [OAuth/OIDC](http://docs.cloudfoundry.org/api/uaa/version/4.24.0/index.html#oauth-oidc)
in the UAA API documentation.

### <a id="skip-ssl-saml"></a> Skip SSL Validation for SAML

For cases where the SAML provider is configured using a valid SAML URL and a self-signed certificate,
you might need to skip SSL validation.

<p class="note"><strong>Note</strong>: This section assumes you have created the SAML identity provider, most likely
by providing the SAML metadata directly.
For more information, see <a href="./configure-external-id.html#config-saml-prov"> Add a SAML Provider</a>. </p>

To enable skipping SSL validation, do the following:

1. Follow the steps 1-4 in [Update UAA Identity Provider Configurations with the API](#updating) above.

1. In step 5, add the following line to the config section in the JSON blob:

    ```
    "skipSslValidation": true
    ```

1. Complete the procedure by following step 6.

For more information about skipping SSL validation, see
[SAML](http://docs.cloudfoundry.org/api/uaa/version/4.24.0/#saml) in the UAA API documentation.

To test your identity provider configurations, you can deploy the [<%= vars.product_full %> Sample Applications](https://github.com/pivotal-cf/identity-sample-apps) to validate the effects of the instructions given in this guide.
