---
title: Updating Service Plans with UAAC
owner: Identity Service
---

This topic describes how Pivotal Cloud Foundry (PCF) admins or plan admins can manage Single Sign-On (SSO)
service plan configurations using the SSO Operator Dashboard or API using the User Account and
Authentication Command Line Interface (UAAC).

The SSO service for PCF manages configurations within the UAA and the Cloud Controller (CC) components of the
Pivotal Application Service (PAS). Each SSO service plan ties together a CC plan and a UAA identity zone.

Beginning with SSO v1.6, you can use the UAAC to manage UAA identity zones configured as part of SSO service plans.

## <a id="creating"></a> Create a UAA Identity Zone Admin Client

<%= partial 'create_zone_admin' %>

## <a id="updating"></a> Update UAA Identity Zone Configurations with the API

This section shows how to use the UAAC to update UAA identity zone configurations, using a
<code>PUT</code> command.

<p class="note warning"><strong>Warning:</strong> This flow is for advanced users only.
  You must always run the <code>PUT</code> command
  with the latest data by doing a <code>GET</code> before a <code>PUT</code> command.
  You must also provide all configuration values, otherwise, data might be lost.
</p>

For general information about UAA API, see the <a href="https://docs.cloudfoundry.org/api/uaa">CF UAA API documentation page </a>.<br>

To make UAA identity zone API calls:

<ol>
<li> Create an identity zone admin client by following the procedure in <a href="#creating">Create a UAA Identity Zone Admin Client</a> above.</li>

<li> Find the UAA identity zone ID:</li>
    <ol type="a">
        <li>
          Log in to the SSO Operator Dashboard at <code>https://p-identity.YOUR-SYSTEM-DOMAIN</code> using your User Account and Authentication (UAA) admin credentials. You can find these credentials in the PAS tile in Ops Manager in <strong>Credentials</strong>.
        </li>

        <li>
        Click the name of the SSO service plan that you want to configure on the SSO dashboard and select
        <strong>Edit Plan</strong> from the dropdown.
        </li>

        <li> Record the identity zone ID for your plan from the SSO Operator Dashboard URL. The URL looks similar to the below.
          <pre>https://p-identity.YOUR-SYSTEM-DOMAIN/dashboard/edit_plan/YOUR-IDENTITY-ZONE-ID</pre>
          Where <code>YOUR-IDENTITY-ZONE-ID</code> is your plan’s identity zone ID.
        </li>
    </ol>
<li> Run the following command, directing the output to a text file: <br>

    <pre>uaac curl -k /identity-zones/YOUR-IDENTITY-ZONE-ID > JSON-BLOB.txt</pre>

    Where:
    <ul>
      <li> <code>YOUR-IDENTITY-ZONE-ID</code> is the UAA identity zone ID you obtained in step 2c.</li>
      <li> <code>JSON-BLOB.txt</code> is the name of your text file.</li>
    </ul>
</li>
<li> In the <code>JSON-BLOB.txt</code> file, delete the header information and array wrapper,
leaving just the JSON blob. Confirm that the ID in this output matches <code>YOUR-IDENTITY-ZONE-ID</code>.<br><br>

    Your remaining JSON blob looks similar to the truncated sample below:

    <pre>
{
  "id": "demo",
  "subdomain": "demo",
  "config": {
    "clientSecretPolicy": {
    "minLength": -1,
    "maxLength": -1,
    "requireUpperCaseCharacter": -1,
    "requireLowerCaseCharacter": -1,
    "requireDigit": -1,
    "requireSpecialCharacter": -1
    },
    ...
  },
  "name": "demo",
  "version": 2,
  "description": "{\"plan_display_name\":\"demo\",
  \"plan_description\":\"Demo Service Plan\"}",
  "created": 1510116389000,
  "last_modified": 1519859509000
}
</pre>
</li>
<li> In your <code>JSON-BLOB.txt</code> file, update the configurations in the JSON blob as needed, and then save the file.
  <p class="note warning"><strong>Warning:</strong> You must provide all <code>config</code> values,
    otherwise, data can be lost when doing an API update as a <code>PUT</code> command.
  </p>
</li>

<li> Submit a UAAC curl request to apply your updated configurations to the identity zone, as shown below.
    <p class="note warning"><strong>Warning:</strong> You must always run this command with the latest data by doing a <code>GET</code> before a <code>PUT</code> command.
    </p>

    <pre>uaac curl -k /identity-zones/YOUR-IDENTITY-ZONE-ID -X PUT
\-H 'Content-Type: application/json' -d "$(cat file.txt)"</pre>
    Where:
    <ul>
      <li> <code>YOUR-IDENTITY-ZONE-ID</code> is the UAA identity zone ID you obtained in step step 2c.</li>
    </ul>

    Where <code>YOUR-IDENTITY-ZONE-ID</code> is the UAA identity zone ID you obtained in step 2c.<br><br>

    A truncated example command looks similar to the below.

     <pre class="terminal">$ uaac curl -k identity-zones/demo\
         -X PUT \
         -H 'Content-Type: application/json' \
         -d '{
              "subdomain": "demo",
              "config": {
                "clientSecretPolicy": {
                  "minLength": 0,
                  "maxLength": 255,
                  "requireUpperCaseCharacter": 0,
                  "requireLowerCaseCharacter": 0,
                  "requireDigit": 0,
                  "requireSpecialCharacter": 0
               },
               ...
             },
             "name": "demo",
             "version": 0,
             "description": "{\"plan\_display\_name\":\"demo\",
             \"plan\_description\":\"Demo Service Plan\"}",
             "created" : 1529690485998,
             "last_modified" : 1529690485998
           }
     </pre>
   </li>
</ol>
   For a full list of UAA API update parameters,
   see the <a href="http://docs.cloudfoundry.org/api/uaa/version/4.19.0/index.html#updating-an-identity-zone">Identity Zones Update Documentation</a>.
## <a id="branding"></a> Modify Branding

You can optionally modify the branding of your login page by changing your company name, logos, legal text, and legal links. <br><br>

Using the steps in <a href="#updating">Update UAA Identity Zone Configurations with the API</a> above
to retrieve the identity zone configurations for your SSO plan,
add or modify the branding section according to the <a href="https://docs.cloudfoundry.org/api/uaa">UAA API documentation</a>. <br> <br>

An example branding section is shown below.<br>

<p class="note"><strong>Note</strong>: All values are optional. You can also generate the base64 text of your PNG images using commands, such as <code>base64 image.png</code>.</p>

<pre>"branding": {
      "companyName": "Pivotal",
      "productLogo": "(base64 of png image here, will show up as image on login page)",
      "squareLogo": "(base64 of png image here, will show up as browser icon)",
      "footerLegalText": "©2017 Pivotal Software, Inc. All Rights Reserved.",
      "footerLinks": {
        "Privacy Policy": "https://run.pivotal.io/policies/privacy-policy/",
        "Terms of Service": "https://run.pivotal.io/policies/terms-of-service",
        "Up to three links, label here": "https://link-here"
      }
    },
</pre>

## <a id="default-groups"></a> Add Default Groups for Users

Optionally, you can add additional default groups for all users.
You do not need to
do manual group assignment or group mappings for these groups.
Use default groups only for universal scopes that all users can have, such as for a global read-only resource.<br><br>

Using the steps in <a href="#updating">Update UAA Identity Zone Configurations with the API</a> to retrieve and update
the current identity zone configurations for your SSO plan, update the default groups section according to the <a href="https://docs.cloudfoundry.org/api/uaa">UAA API documentation</a>.<br><br>

An example of the default groups section is shown below. You can add more groups in the array list.
Users will automatically have these scopes though they are not explicitly assigned to users.<br>

<pre>"userConfig": {
      "defaultGroups": [
        "openid",
        "password.write",
        "uaa.user",
        "approvals.me",
        "profile",
        "roles",
        "user_attributes",
        "uaa.offline_token",
        "new.group.everyone.should.have",
        "another.new.group.everyone.should.have"
      ]
    },
</pre>

##<a id="rotate-keys"></a> Rotate JSON Web Token (JWT) Signing Keys

To rotate JWT signing keys:

<ol>
<li><p>Generate a private key that can be used for signing. For example, run <code>ssh-keygen -t rsa</code>.<br><br>
Generate your signing keys in a secure manner.
Refer to your security organization for acceptable key generation practices.</p></li>

<li><p>Take the value of the generated private key and make it a single
line of text, replacing all new lines with <code>\n</code>. For example:<br><br></p>

<p><code>-----BEGIN RSA PRIVATE KEY-----</code>
<code>MIIEogIBAAKCAQEA63iy3EpQG46eRzUKpI8sB/AQdbZwwrDkfPGg5Xt5xNM/wQrO</code>
<code>5l/yWp3lCElSqnKPJbCGu1DQThB47kGQjBoXL8TcrkxuCyuxaV7B5ryq3w+g3R1x</code>
<code>-----END RSA PRIVATE KEY-----</code></p>

<p><br>Becomes:</p>

<pre><code>-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEA63iSAMPLEzUKpI8sB/AQdbZwwrDkSAMPLEt5xNM/wQrO\n5l/yWp3lCElSqnKSAMPLE8TcrkxuCyuxaV7B5ryq3w+g3R1x\n-----END RSA PRIVATE KEY-----\n
</code></pre></li>

<li><p>Using the steps in <a href="#updating">Update UAA Identity Zone Configurations with the API</a> above to
retrieve and update the identity zone configurations for your SSO plan,
update the token policy section to add your new generated private key as the value for <code>signingKey</code>. <br><br>
An example of this section is shown below.
<p class="note"><strong>Note</strong>: After you begin to configure JWT signing keys within a service plan,
    you can no longer default to share the multi-tenant JWT signing key inherited from the default zone.</p>

<p class="note"><strong>Note</strong>: The first time you set a signing key for an identity zone,
existing issued tokens are immediately invalidated for online validation.
You may need to restart applications that do offline validation for the new signing keys to take effect.</p>

<pre><code> "tokenPolicy": {
  "accessTokenValidity": -1,
  "refreshTokenValidity": -1,
  "jwtRevocable": false,
  "refreshTokenUnique": false,
  "refreshTokenFormat": "jwt",
  "activeKeyId": "first-signing-key",
  "keys" : {
          "first-signing-key" : {
            "signingKey" : "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEA63iSAMPLEzUKpI8sB/AQdbZwwrDkSAMPLEt5xNM/wQrO\n5l/yWp3lCElSqnKSAMPLE8TcrkxuCyuxaV7B5ryq3w+g3R1x\n-----END RSA PRIVATE KEY-----\n"
          }
},
</code></pre>

<p>For more information, see <a href="https://docs.cloudfoundry.org/api/uaa">UAA API documentation</a>.</p></li>
</ol>
