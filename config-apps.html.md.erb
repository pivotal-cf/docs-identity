---
title: Configuring Apps
owner: Identity Service
---

This topic explains how Pivotal Cloud Foundry (PCF) developers configure their
apps to use the Single Sign-On (SSO) service and use the SSO Admin Client to manage connections
between SSO identity providers, apps, users, and other resources.

## <a id="internal"></a> Set Up PCF Apps to Use SSO

To configure SSO for a PCF app, do the following:

1. Determine the SSO application type of the app to use the SSO service.
   For information, see [Determining SSO Application Type](./determine-type.html).

1. Configure the SSO service for the app using one of the following methods:
	- [Option 1: Configure SSO Properties with Bind Parameters](#configure_bind_params)
	- [Option 2: Configure SSO Properties with Environment Variables](#configure)

	<p class="note"><strong>Note</strong>: Use either bind parameters or environment
		variables to configure SSO properties.
		Apps that have environment variables set do not work with bind parameters.</p>

### <a id="configure_bind_params"></a> Option 1: Configure SSO Properties with JSON Bind Parameters

In SSO v1.7.0 and later, you can use a JSON file or string containing bind parameters to
configure SSO properties.
For more information about bind parameters, see [Bind Parameter Options](#bind_params) below.

To configure SSO properties with JSON bind parameters, run the following command:

```
cf bind-service APP-NAME INSTANCE-NAME -c JSON
```

Where:

+ `APP-NAME` is the name of your app.
+ `INSTANCE-NAME` is the name of the service instance you are binding.
+ `JSON` is the path to the JSON file or the full JSON string containing bind parameters.

For example:

<pre class="terminal">
$ cf bind-service my-app my-instance -c example.json
Binding service my-instance to my-app in org my-org / space test as user@example.com...
OK

$ cat example.json
{
    "grant_types": ["authorization_code"],
    "scopes": ["openid", "todo.read", "todo.write"],
    "authorities": ["openid", "uaa.resource", "todo.read", "todo.write"],
    "redirect_uris": ["https://my-app.example.com/**","http://my-app.example.com/path/to/app"],
    "auto_approved_scopes": ["openid", "todo.read"],
    "identity_providers": ["uaa","ldap","my-saml-provider"],
    "required_user_groups": ["openid","todo.read"],
    "resources": {"todo.read" : "Read to list", "todo.write": "Write to list"},
    "access_token_lifetime": 300,
    "refresh_token_lifetime": 86400,
    "icon": "R0lGODlhAQABAAAAACH5BAEKAAEALAAAAAABAAEAAAICTAEAOw==",
    "launch_url": "http://my-app.example.com",
    "show_on_home_page": true
}
</pre>

For more information about the `cf bind-service` command,
see [bind-service](https://cli.cloudfoundry.org/en-US/cf/bind-service.html)
in the Cloud Foundry CLI Reference Guide.

#### <a id="bind_params"></a>Bind Parameter Options

The table below provides descriptions and default values for bind parameters:

<table>
	<col style="width:45%">
    <col style="width:47%">
    <col style="width:8%">
	<tr>
		<th>Property&nbsp;Name</th>
		<th>Description</th>
		<th>Default</th>
	</tr>
	<tr>
		<td><code>grant_types</code></td>
		<td>Allowed grant type for the app through the SSO service.
			Only one grant type per app is supported by SSO.
			If you wish to set more than one grant types per app, you can resort
			to <a href="./manage-clients-api.html">this workaround</a>.</td>
		<td> </td>
	</tr>
	<tr>
		<td><code>identity_providers</code></td>
		<td>Allowed identity providers for the app through the SSO service plan.
			This is a comma-separated list of identity provider origin keys. <br><br>
			The origin keys are derived from the identity provider name using the following rules:
			<ul><li>Uppercase letters are converted to lowercase letters.</li>
				<li>Spaces, periods, and underscores are converted to hyphens.</li>
				<li>Multiple hyphens are combined into a single hyphen.</li>
			</ul>
			For example, if your identity provider name is <code>example.com Provider</code>,
			the corresponding origin key is <code>example-com-provider</code>.</td>
		<td><code>uaa</code></td>
	</tr>
	<tr>
		<td><code>redirect_uris</code></td>
		<td>Comma-separated allowlist of redirection URIs allowed for the app.
                    Each value must be a valid URI.
                    Custom URIs are supported for mobile apps.</td>
		<td>Always includes the app route</td>
	</tr>
	<tr>
		<td><code>scopes</code></td>
		<td>Comma-separated list of scopes that belong to the app and are registered
			as client scopes with the SSO service.
			This value is ignored for client credential grant type apps.</td>
		<td><code>openid</code></td>
	</tr>
	<tr>
		<td><code>auto_approved_scopes</code></td>
		<td>Comma-separated list of scopes that the app is automatically authorized
			when acting on behalf of users through SSO service.</td>
		<td>Defaults to existing scopes/authorities</code></td>
	</tr>
	<tr>
		<td><code>authorities</code></td>
		<td>Comma-separated list of authorities that belong to the app and are
			registered as client authorities with the SSO service.
			Privileged identity zone/plan administrator scopes, such as
			<code>scim.read</code>, <code>idps.write</code> cannot be bootstrapped
			and must be assigned by zone/plan administrators.
			This value is ignored for any grant type other than client credentials.</td>
		<td><code>uaa.resource</code></td>
	</tr>
	<tr>
		<td><code>required_user_groups</code></td>
		<td>Comma-separated list of groups a user must have in order to log in to the app.</td>
		<td>No value</td>
	</tr>
	<tr>
		<td><code>access_token_lifetime</code></td>
		<td>Lifetime in seconds for the access token issued to the app by the SSO service.</td>
		<td><code>43200</code></td>
	</tr>
	<tr>
		<td><code>refresh_token_lifetime</code></td>
		<td>Lifetime in seconds for the refresh token issued to the app by the SSO service.</td>
		<td><code>2592000</code> (not used for client credentials)</td>
	</tr>
	<tr>
		<td><code>resources</code></td>
		<td>Resources for the app to use as scopes/authorities for the SSO service
			created during bind, if they do not already exist.
			All permissions within the same top level permission,
			such as <code>todo.read</code> and <code>todo.write</code>, must be
			specified in the same bind command.
			You cannot specify additional permissions in the same top level permission,
			such as <code>todo.admin</code>, in additional binds.</td>
		<td>No value</td>
	</tr>
	<tr>
		<td><code>icon</code></td>
		<td>App icon displayed next to the app name on the Pivotal Account dashboard.
			It is displayed if <code>show_on_home_page</code> is set to <code>true</code>.
			Do not exceed 64kb.</td>
		<td>No value</td>
	</tr>
	<tr>
		<td><code>launch_url</code></td>
		<td>App launch URL used for the app on the Pivotal Account dashboard
			if <code>show_on_home_page</code> is set to <code>true</code>.</td>
		<td>The application route</td>
	</tr>
	<tr>
		<td><code>show_on_home_page</code></td>
		<td>If set to <code>true</code>, the app appears on the Pivotal Account
			dashboard with the corresponding icon and launch URL.</td>
		<td><code>true</code></td>
	</tr>
</table>

### <a id="configure"></a> Option 2: Configure SSO Properties with Environment Variables

Instead of using bind parameters, you can manually configure your SSO service for
the app using environment variables, then bind the app to an SSO service instance.
For how to bind the app, see [Bind a PCF App](#bind) below.

<p class="note"><strong>Note</strong>: This step is not necessary if you have already
	configured SSO properties with your app using <a href="#configure_bind_params">bind parameters</a>.
	Apps that have environment variables set do not work with bind parameters and an error is shown.</p>

The SSO service reads its configuration properties from environment variables
that are set in the apps that use it.
Most of these environment variables are prefixed with `SSO_`.

There are two ways to set the SSO configuration properties for an app:

* Set the environment variables [manually](#manual-config) after you deploy the app,
  in Apps Manager or with the Cloud Foundry Command-Line Interface (cf CLI).

* Include the config settings in the application manifest,
  so that PCF [bootstraps](#bootstrap) them automatically when it deploys the app.

The table below provides descriptions and default values for environment variables that apps use to configure SSO.
See the [SSO sample apps](https://github.com/pivotal-cf/identity-sample-apps) for details
and the `manifest.yml` files in the same repository for examples of [bootstrapping](#bootstrap) these values.

<p class="note"><strong>Note</strong>: These configurations are only applied when
	initially binding to the service instance.
	A subsequent <code>cf push</code> of the app does not update the configurations.
	To update these configurations, manually update them using the SSO
	dashboard, or unbind and rebind the service instance.</p>

<table>
	<col style="width:45%">
    <col style="width:47%">
    <col style="width:8%">
	<tr>
		<th>Property&nbsp;Name</th>
		<th>Description</th>
		<th>Default</th>
	</tr>
	<tr>
		<td><code>name</code></td>
		<td>Name of the app</td>
		<td>(N/A - Required Value)</td>
	</tr>
	<tr>
		<td><code>GRANT_TYPE</code></td>
		<td>Allowed grant type for the app through the SSO service.
			Only one grant type per app is supported by SSO.
			If you wish to set more than one grant types per app, you can resort
			to <a href="./manage-clients-api.html">this workaround</a>.</td>
		<td> </td>
	</tr>
	<tr>
		<td><code>SSO_IDENTITY_PROVIDERS</code></td>
		<td>Allowed identity providers for the app through the SSO service plan.
			This is a comma-separated list of identity provider origin keys.
			The origin keys are derived from the identity provider name using the
			following rules:
			<ul>
				<li> Uppercase letters are converted to lowercase letters.</li>
				<li>Spaces, periods, and underscores are converted to hyphens.</li>
				<li>Multiple hyphens are combined into a single hyphen.</li>
			</ul>
			For example, if your identity provider name is <code>example.com Provider</code>,
			the corresponding origin key is <code>example-com-provider</code>.</td>
		<td><code>uaa</code></td>
	</tr>
	<tr>
		<td><code>SSO_REDIRECT_URIS</code></td>
		<td>Comma separated allowlist of redirection URIs allowed for the app.
                    Each value must be a valid URI.
                    Custom URIs are supported for mobile apps.</td>
		<td>(Always includes the app route)</td>
	</tr>
	<tr>
		<td><code>SSO_SCOPES</code></td>
		<td>Comma-separated list of scopes that belong to the app and are registered
			as client scopes with the SSO service.
			This value is ignored for client credential grant type apps.</td>
		<td>openid</td>
	</tr>
	<tr>
		<td><code>SSO_AUTO_APPROVED_SCOPES</code></td>
		<td>Comma-separated list of scopes that the app is automatically authorized
			when acting on behalf of users through SSO service.</td>
		<td>(Defaults to existing scopes/authorities)</td>
	</tr>
	<tr>
		<td><code>SSO_AUTHORITIES</code></td>
		<td>Comma-separated list of authorities that belong to the app and are
			registered as client authorities with the SSO service.
			Privileged identity zone/plan administrator scopes, such as <code>scim.read</code>,
			<code>idps.write</code> cannot be bootstrapped and must be assigned
			by zone/plan administrators.
			This value is ignored for any grant type other than client credentials.</td>
		<td><code>uaa.resource</code></td>
	</tr>
	<tr>
		<td><code>SSO_REQUIRED_USER_GROUPS</code></td>
		<td>Comma-separated list of groups a user must have in order to authenticate
			successfully for the app.</td>
		<td>(No value)</td>
	</tr>
	<tr>
		<td><code>SSO_ACCESS_TOKEN_LIFETIME</code></td>
		<td>Lifetime in seconds for the access token issued to the app by the SSO service.</td>
		<td>43200</td>
	</tr>
	<tr>
		<td><code>SSO_REFRESH_TOKEN_LIFETIME</code></td>
		<td>Lifetime in seconds for the refresh token issued to the app by the SSO service.</td>
		<td>2592000 (not used for client credentials)</td>
	</tr>
	<tr>
		<td><code>SSO_RESOURCES</code></td>
		<td>Resources that the app will use as scopes/authorities
            for the SSO service to be created during bootstrapping if they do not already exist.
            The input format can be referenced in the provided sample manifest.
            Note that currently all permissions within the same top level permission,
            such as <code>todo.read</code> and <code>todo.write</code>, must be
            specified in the same application manifest.
            Currently you cannot specify additional permissions in the same top level permission,
            such as <code>todo.admin</code>, in additional application manifests.</td>
		<td>(No value)</td>
	</tr>
	<tr>
		<td><code>SSO_ICON</code></td>
		<td>App icon that will be displayed next to the app name on the Pivotal
			Account dashboard if show on home page is enabled. Do not exceed 64kb.</td>
		<td>(No value)</td>
	</tr>
	<tr>
		<td><code>SSO_LAUNCH_URL</code></td>
		<td>App launch URL that will be used for the app on the Pivotal Account
			dashboard if show on home page is enabled.</td>
		<td>(Application route)</td>
	</tr>
	<tr>
		<td><code>SSO_SHOW_ON_HOME_PAGE</code></td>
		<td>If set to true, the app will appear on the Pivotal Account dashboard
			with the corresponding icon and launch URL.</td>
		<td>True</td>
	</tr>
</table>

For more information and manifest examples, see the
[identity-sample-apps](https://github.com/pivotal-cf/identity-sample-apps/tree/master)
GitHub repository.

#### Remove SSO Configuration Properties

You can remove SSO configuration properties for an app, or any environment variables
set through `cf set-env`, Apps Manager, or [bootstrapping](#bootstrap) as follows:

1. Run `cf unset-env APP_NAME PROPERTY_NAME`.

1. Rebind the app.


#### <a id="manual-config"></a> Manually Configure Apps for SSO

For apps already deployed to PCF, you can set their `GRANT_TYPE`, `SSO_IDENTITY_PROVIDERS`,
and other SSO configuration environment variables with the [`cf set-env`](http://cli.cloudfoundry.org/en-US/cf/set-env.html)
command, or in Apps Manager as follows:

1. Log in to Apps Manager at `https://apps.YOUR-SYSTEM-DOMAIN`.

1. Navigate to your app.

1. Click the **Env Variables** tab.

1. Click **Add an Env Variable**.

1. For **Variable Name** enter the name of the [SSO configuration property](#configure)
   that you are setting, such as `GRANT_TYPE`.

1. For **Value**, enter the property value. For example, to set the `GRANT_TYPE`
   property for a Single-Page JavaScript App,
   enter `implicit`, which is the OAuth Grant Type listed for your
   [SSO application type](./determine-type.html) above.

1. [Bind](#bind) and restage your app.

#### <a id="bootstrap"></a> Bootstrap SSO Configuration

In SSO v1.4.0 and later, you can include SSO configuration properties in your application manifest,
to automatically bootstrap the values when you bind or rebind the app to an SSO service instance.

The values from the manifest automatically save to the environment variables that
configure your app for SSO.
Bootstrapping SSO configuration values from the manifest eliminates the need to
set environment variables after you deploy your app.

<p class="note"><strong>Note</strong>: These configurations are only applied at
	the initial service binding time. Subsequent cf push of the application will
	<strong>NOT</strong> update the configurations.
	You will either need to manually update the configurations via the SSO dashboard
	or unbind and rebind the service instance.</p>

This snippet below shows how to include `GRANT_TYPE` `SSO_IDENTITY_PROVIDERS` in your manifest.

```
---
applications:
  - name: APPLICATION NAME
    env:
      GRANT_TYPE: password
      SSO_IDENTITY_PROVIDERS: uaa, sample-identity-provider
```

The `GRANT_TYPE` property defaults to `authorization_code`, for Web App application type.
`SSO_IDENTITY_PROVIDERS` defaults to `uaa`, for the PCF internal user store.

If you specify your own scopes and authorities, consider including the following
values in your `SSO_SCOPES` or `SSO_AUTHORITIES` property list.
These values are not added your user-provided list by default:

* `openid` — for apps with `authorization code`, `password`, and `implicit`
[grant type](./determine-type.html)

* `uaa.resource` — for apps with `client_credentials` [grant type](./determine-type.html)

The [table below](#configure) lists all SSO properties that you can set in your
application manifest to bootstrap the values into your app's SSO client configuration.

After an app deploys with bootstrapped SSO configuration values, it is ready to
bind to an SSO service instance.
For how to bind an app, see [Bind a PCF App](#bind) below.

#### <a id="bind"></a> Bind a PCF App

After a PCF app is [configured](#configure) for SSO, you can bind it to an SSO
service instance using Apps Manager as follows:

1. Log in to Apps Manager as a Space Developer.
1. Select the space where your app runs.
1. Under **Applications**, click the name of your app.
1. Click the **Services** tab.
1. Click **Bind a Service**.
1. Bind your app to a service to create an associated OAuth Client.
	 1. Select an existing SSO service instance from the drop-down menu and click **Bind**.
	 1. Create a new service instance:
	 	2. Click **or add from Marketplace**.
		3. Select the **Single Sign-On** service under Services Marketplace.
		4. Select a Service Plan, then click **Select this plan**.
		5. Enter an **Instance Name**, select a space, select an app, then click **Add**.

Alternatively, you can bind the PCF app to an SSO service instance using cf CLI as follows:

```
 cf bind-service APP-NAME SAMPLE-PLAN-SERVICE-INSTANCE
```

## <a id="sso-dashboard"></a> Manage App Configurations Using the SSO Dashboard

The SSO dashboard allows application developers to view the app configurations and
resources available within their space. To access the dashboard, first you must
[create a service instance](./manage-service-instances.html#create-svc-instance)
for your Space.
Then you can follow the steps below to manage your application configurations via
the SSO dashboard.

1. Log in to Apps Manager as a Space Developer.
1. Select the space where your service instance is located.
1. Under **Services**, click **Manage** next to the SSO service instance to launch the SSO dashboard.
1. Click your app.

## <a id="register-service-keys"></a> Register an Externally Hosted App to PCF Using Service Keys

You can use a JSON file or string containing bind parameters to register an
externally hosted app using service keys.
For more information about bind parameters, see [Bind Parameter Options](#bind_params) above.

To register an externally hosted app using service keys, do the following:

1. To create a service key, run the following command:

    ```
    cf create-service-key INSTANCE-NAME SERVICE-KEY -c JSON
    ```
    Where:
    + `INSTANCE-NAME` is the name of your service instance.
    + `SERVICE-KEY` is the name you want for your service key.
    + `JSON` is the path to the JSON file or the full JSON string containing bind parameters.

    You must include the `name` parameter in your JSON file or string. The value of `name` is the user-defined
    name of your externally hosted app. <br><br>

    For example:

    <pre class="terminal">
    $ cf create-service-key my-instance my-service-key -c example.json
    Creating service key my-service-key for service instance my-instance as user@example.com...
    OK

    $ cat example.json
    {
        "name": "my-app",
        "grant_types": ["authorization_code"],
        "scopes": ["openid", "todo.read", "todo.write"],
        "authorities": ["openid", "uaa.resource", "todo.read", "todo.write"],
        "redirect_uris": ["https://my-app.example.com/**","http://my-app.example.com/path/to/app"],
        "auto_approved_scopes": ["openid", "todo.read"],
        "identity_providers": ["uaa","ldap","saml"],
        "required_user_groups": ["openid","todo.read"],
        "resources": {"todo.read" : "Read to list", "todo.write": "Write to list"},
        "access_token_lifetime": 300,
        "refresh_token_lifetime": 86400,
        "icon": "R0lGODlhAQABAAAAACH5BAEKAAEALAAAAAABAAEAAAICTAEAOw==",
        "launch_url": "http://google.com",
        "show_on_home_page": false
    }
    </pre>

    For more information about the `cf create-service-key` command, see [create-service-key](https://cli.cloudfoundry.org/en-US/cf/create-service-key.html)
    in the Cloud Foundry CLI Reference Guide.

1. To obtain the service key's credentials, run the following command:


    ```
    cf service-key INSTANCE-NAME SERVICE-KEY
    ```

    Where:
    + `INSTANCE-NAME` is the name of your service instance.
    + `SERVICE-KEY` is the name of the service key you created in step 1.

    For more information about how to use these values, see
    [Integrate SSO with Your App](./integrating-sso.html).

    <p class="note"><strong>Note:</strong> <code>client_credentials</code> grant types, administrative scopes, and
    scopes in other spaces are not available. These must be manually added by a Plan
    Administrator or system operator through the SSO Operator Dashboard or UAA CLI. </p>

## <a id="register-dashboard"></a> Register an Externally Hosted App Using the SSO Dashboard

To register an externally hosted app using the SSO Developer Dashboard, see the following steps:

1. Determine the type of app for the SSO `service.bind`.
For more information, see [Determining SSO Application Type](./determine-type.html).
1. Log in to Apps Manager as a Space Developer.
1. Select the space where your service instance is located.
1. Under **Services**, click **Manage** next to the SSO service instance.
This launches the SSO dashboard.
1. Click **New App**.
1. Enter an **App Name**.
1. Choose an app type under **Select an Application Type**.
1. Enter an **App Launch URL** that specifies the address of your app.
1. Upload an app icon for your app.
1. Click **Show on homepage** to display the app on the UAA or Pivotal Account home page.
	<p class="note"><strong>Note</strong>: To display the app on the home page,
		you must enter an **App Launch URL** or Upload an app icon.</p>
1. Select one or more **Identity Providers** for your app. Internal User Store is the default.
	<p class="note"><strong>Note</strong>: When registering an externally hosted app,
		a Space Developer can choose from internal and external identity providers.
		If the Space Developer selects multiple identity providers, users must
		select which provider to use when they sign in.
		This option is available for all app types except
		<code>Service-to-Service App</code>.</p>
1. If your Application Type is `Web App` or `Single-Page JavaScript App`, enter
   a allowlist of **Auth Redirect URIs** beneath **Redirect URIs**.
   The redirect query parameter specified on the OAuth request must match the URIs
   specified in this list. Otherwise, SSO rejects the request.
1. For the **Scopes** field, specify the permissions that the app can request on the user’s behalf.
   This field defaults to `openid` for Web, Native Mobile, and Single-Page JavaScript Apps.
   This field defaults to `uaa.resource` for Service-to-Service Apps.
   If this app is purely for authentication purposes, then the `openid` scope is sufficient.
   If the app makes API calls on behalf of the end user, you must specify both
   the scopes enforced by the API and the scopes to be requested by the app.

	| Scope  | Description |
	|-------------------|------------------------------|
	| `openid` | Provides access to make OpenID Connect requests |
	| `user_attributes` | Provides access to custom attributes from an external identity provider |
	| `roles` | Provides access to external groups from an identity provider |
	| `uaa.resource` | Provides access to check_token endpoint for service-to-service flows |
<p class="note"><strong>Note</strong>: Add the <code>user_attributes</code> scope
	to the client scopes to return user attributes from the ID token.</p>
<p class="note"><strong>Note</strong>: Under <strong>Scopes</strong>, you can
	select resources defined in any space if the app type is a <code>Web App</code>,
	<code>Native Mobile App</code>, or <code>Single-Page JavaScript App</code>.
	If the app type is a <code>Service-to-Service App</code>, you can only select
	resources defined within the space.</p>
1. For **Auto-Approved Scopes**, select any scopes that the SSO service automatically
approves when the app makes a request on behalf of a user.
Select only scopes pertaining to apps owned and managed by your company.
Do not select scopes that pertain to externally hosted apps.
1. Click **Create App**. The **Next Steps** page appears, describing the endpoints
required for app integration.
For more information, see <a href="./integrating-sso.html">Integrate SSO with Your App</a>.

## <a id="admin"></a> Create Admin Client

You can create an admin client to perform administrative functions,
such as managing identity providers, apps, users, groups, and resources
in a specific zone where you create the client.

You must be at least a plan administrator to perform these steps.

To create an admin client:

1. Log in to Apps Manager.
2. Select the space where your service instance is located.
   This specifies the zone you manage as an admin client.
3. Under **Services**, click the **Single Sign-On** service.
4. Click **Manage** next to your SSO service instance to launch the SSO dashboard.
5. Click **New App**.
6. Enter an **App Name**.
7. Under **Select an Application Type**, select **Service-to-Service App**.
8. Click **Select Scopes** and choose what actions the admin client can perform
   from the following **Admin Permissions**:

	| Scope  | Description |
	|-------------------|------------------------------|
	| `clients.admin` | Provides superuser access to create, modify, and delete clients |
	| `clients.read` | Provides access to read information about clients |
	| `clients.write` | Provides access to create and modify clients |
	| `scim.create` | Provides access to create users |
	| `scim.read` | Provides access to read information about users and group memberships |
	| `scim.write` | Provides access to create, modify, and delete users and group memberships |
	| `idps.read` | Provides access to read information about identity providers |
	| `idps.write` | Provides access to create, modify, and delete identity providers |

9. Click **Create App**. You are given the option to view and download the
**App ID** and **App Secret**.
Download or make note of this information for use with other SSO procedures.

## <a id="delete"></a> Delete App that Uses SSO

Delete a [Delete a PCF App](#delete-pcf) or an [Delete an Externally Hosted App](#delete-external)
that uses SSO as follows:

### <a id="delete-pcf"></a> Delete a PCF App

To delete a PCF app:

1. Log in to Apps Manager as a Space Developer.
1. Select the space where your app is located.
1. Under **Applications**, click the name of your app.
1. On the Application page, click **Delete App**.
1. On the popup, click **Delete** to confirm that you want to delete the app
   and its configurations from Apps Manager and the service dashboard.

### <a id="delete-external"></a> Delete an Externally Hosted App

To delete an externally hosted app that uses SSO:

1. Log in to Apps Manager as a Space Developer.
1. Select the space where your service instance is located.
2. Under **Services**, click **Manage** next to your SSO service instance to
   launch the SSO dashboard.
3. Click your app.
4. Click **Delete** at the bottom of the page.
5. On the popup, click **Delete App** to confirm that you want to delete the app
   and its configurations.

	<p class="note"><strong>Note</strong>:
		Deleting an externally hosted app removes the app and its
		configurations from the SSO dashboard.
		However, it still exists on your hosted platform.</p>
