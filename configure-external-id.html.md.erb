---
title: Configuring External Identity Providers
owner: Identity Service
---

This topic describes how admins configure a <%= vars.product_full %> service plan to manage user
access to <%= vars.app_runtime_abbr %> apps using an external identity provider (IdP).

<p class="note">
  <strong>Note:</strong> You can also configure a <%= vars.product_short %> service plan to use the
  internal user store to manage user accounts.
  For more information, see <a href="./configure-internal-us.html">Configuring Internal User Store</a>.
</p>


## <a id='config-ext-prov'></a> Configure an External Identity Provider

You can configure <%= vars.product_short %> to use external IdPs that support:

+ SAML 2.0. See [Add a SAML Provider](#config-saml-prov).
+ OpenID Connect (OIDC). See [Add an OIDC Provider](#config-ext-oidc).
+ LDAP. See [Add an LDAP Provider](#config-ext-ldap).

To delete an external IdP, see [Delete an External Identity Provider](#delete-idp) below.


### <a id='config-saml-prov'></a> Add a SAML Provider

To add an external SAML IdP:

1. Log in to the <%= vars.operator_dash %> at `https://p-identity.SYSTEM-DOMAIN` using your UAA admin
credentials.
You can find these credentials in your <%= vars.app_runtime_full %> tile in <%= vars.ops_manager %>
on the **Credentials** tab.

1. Click the plan name and navigate to the **Identity Providers** tab.

1. Click **Add IDP**.

1. Enter an **Identity Provider Name**. This name is displayed as a link on the login page.

1. Enter an **Identity Provider Description**. This is the name of the group that the IdP
authenticates. This description is displayed to the Space Developers when they select an IdP for
their app.

1. Under **Identity Provider type**, select **SAML 2.0**.

1. Configure **Identity Provider Metadata** by configuring one of the below fields as follows:

    <table>
      <tr>
        <th>Field</th>
        <th>Instructions</th>
      </tr>
      <tr>
        <td><strong>Identity Provider Metadata URL</strong></td>
        <td>Select the <strong>Identity Provider Metadata URL</strong> radio button, then
        enter a URL and click <strong>Preview Metadata</strong>. If you select this option,
          your metadata is periodically fetched from the configured URL.
          This keeps the metadata up-to-date. </td>
      </tr>
      <tr>
        <td><strong>SAML File Metadata</strong></td>
        <td>Select the <strong>Upload IdP Metadata File</strong> radio button, then click browse to
          upload the XML metadata that you downloaded from your external IdP.
          If you select this option, your metadata is not periodically updated.
          If the metadata changes, you must manually upload the file again.
        </td>
      </tr>
    </table>

    ![Screenshot of the SSO Operator Dashboard.
    There is an 'Identity Provider Metadata URL' radio button.
    Below it is a field to enter a URL and, next to it, a 'Preview Metadata' button.
    Below that is an 'Upload IdP Metadata File' radio button.
    Below that is a 'Browse' button with an adjacent field that displays the XML file selected.](images/saml-metadata.png)

1. Enter **Email Domains**. This is a comma-separated list of domains for IdP discovery.


#### <a id='saml-atts-maps'></a> (Optional) Configure User Attributes and External Group Mappings

To configure user attributes and external group mappings:

1. Under **Attribute & Group Mappings**, scroll to **User Attributes**.

1. Enter a **SAML Attribute Name** next to the corresponding attribute from the incoming SAML
assertion.
They are sent to apps through OpenID tokens, along with any other stored user information issued by
<%= vars.product_short %>.

    ![Screenshot of the 'Attribute & Group Mapping' section.
    There are 'SAML Attribute Name' fields for 'email', 'given name', 'family name',
    and 'phone number'](images/user-attributes-SAML.png)

1. Under **Attribute & Group Mappings**, scroll to **External Group Mappings**.
After a Space Developer defines the resources required by an app, an admin can map existing groups
to those resources.

    For information about how Space Developers define resources, see
    [Create or Edit Resources](./manage-resources.html#create-resources).

    After resource permissions mappings are configured and a user authenticates, the user group
    memberships are mapped to scopes in the resulting token.

    You can configure external group mappings as follows:

    <table>
      <tr>
        <th>Field</th>
        <th>Instructions</th>
      </tr>
      <tr>
        <td>SAML Groups Attribute Name</td>
        <td>Enter the name of the attribute in the SAML Assertion which contains the list of group
          memberships.</td>
      </tr>
      <tr>
        <td>External Group Name</td>
        <td>Enter the group name that you defined in the external IdP.</td>
      </tr>
      <tr>
        <td>Permissions</td>
        <td>Search and select the SSO permissions that users in the external group should have access
          to.</td>
      </tr>
    </table>

    <p class="note">
      <strong>Note:</strong> Groups with unsupported characters in permissions mappings are not
      editable. Supported characters are alphanumeric characters, hyphens, and underscores.
    </p>

    <p class="note">
      <strong>Note:</strong> You can use the UAA API to automate the above procedure.
      To do this automation, you need an identity zone admin client.
      For instructions about creating the identity zone
      admin client, see
      <a href="./configure-id-providers-api.html#creating">Create a UAA Identity Zone Admin Client</a>.
      <br><br>
      For instructions about granting admin permissions to mapped external identity groups, see
      <a href="https://docs.cloudfoundry.org/uaa/uaa-user-management.html#external-group">Grant Admin Permissions to an External Group (SAML or LDAP)</a> in the Cloud Foundry documentation.
    </p>

1. Under **Attribute & Group Mappings**, scroll to **External Group Allowed List**.
An admin can include groups from an external IdP in a group allowlist.
The list of groups in the allowlist propagates into the `roles` claim of the ID token and the
`roles` key of the `/userinfo` endpoint response when a user authenticates using an external IdP.

    <p class="note">
      <strong>Note:</strong> For an app to retrieve an ID token or a <code>/userinfo</code> response
      containing external groups, the app must request the <code>roles</code> claim and the group
      allowlist must include the external groups.
    </p>

    Select **Allow all groups**, **Do not allow any groups**, or **Select groups to allow** from
    the radio group.

    <table>
      <col style="width:40%">
      <col style="width:60%">
        <tr>
          <th>Field</th>
          <th>Description</th>
        </tr>
        <tr>
          <td><strong>Allow all groups</strong></td>
          <td>All groups appear in the <code>roles</code> claim of the ID token and the <code>roles</code> key of the <code>/userinfo</code> endpoint</td>
        </tr>
        <tr>
          <td><strong>Do not allow any groups</strong></td>
          <td>No groups appear in the <code>roles</code> claim of the ID token and the <code>roles</code> key of the <code>/userinfo</code> endpoint</td>
        </tr>
        <tr>
          <td><strong>Select groups to allow</strong></td>
          <td>Groups are rejected by default. Only groups matching the specified matchers are present in the <code>roles</code> claim of the ID token and the <code>roles</code> key of the
          <code>/userinfo</code> endpoint.
          To specify a matcher, choose a <strong>Match Type</strong>, then specify an <strong>Allowed External Group Name Pattern</strong> that matches group names in your Identity Provider.
          </td>
        </tr>
    </table>

1. Under **Attribute & Group Mappings**, scroll to **Custom Attributes** and configure the fields
as follows:

    <table>
      <tr>
        <th>Field</th>
        <th>Instructions</th>
      </tr>
      <tr>
        <td><strong>Custom Attributes</strong></td>
        <td>Enter any custom attributes to propagate from the IdP to the service provider. <br>
          They are sent to apps through OpenID tokens,
          along with any other stored user information issued by <%= vars.product_short %>.
          <ol>
            <li> (Optional) To expose custom user attributes through the <code>/userinfo</code> endpoint, select <strong>Persist Custom Attributes</strong>.
              Your app must also have the <code>user_attributes</code> scope assigned for the custom attributes to appear.</li>
            <li>Enter an <strong>SSO Attribute Name</strong>.</li>
            <li>Enter an <strong>IdP Attribute Name</strong> with the corresponding attribute from the incoming SAML assertion.</li>
          </ol>
        </td>
      </tr>
    </table>

    ![Screenshot of the 'Custom Attributes' section.
    There is a selected 'Persist Custom Attributes' checkbox.
    Below that are 'SSO Attribute Name' and 'IdP Attribute Name' fields.
    At the bottom is an 'Add New Item' button.](images/custom-attributes.png)

1. Click **Save** to save the IdP.


#### <a id='config-ext-settings'></a> Configure SAML Settings

For each plan, you can configure SAML settings
when SAML is used for exchanging authentication and authorization data
between the IdP and the service provider.

<%= vars.product_short %> enables the ability to sign authentication requests
and require signed assertions from the external IdP.
These settings affect all SAML Identity Providers in the plan.

To configure SAML settings:

1. Log in to the <%= vars.operator_dash %> at `https://p-identity.SYSTEM-DOMAIN`
using your UAA admin credentials.
You can find these credentials in your <%= vars.app_runtime_abbr %>
tile in <%= vars.ops_manager %> under the **Credentials** tab.

1. Click the plan name and navigate to the **Configure** tab.

1. Configure the fields as follows:

    <table>
      <tr>
        <th width=35%>Field</th>
        <th>Description</th>
      </tr>

      <tr>
        <td><strong>Perform signed authentication requests</strong></td>
        <td>Select this checkbox to enable the service provider to sign requests sent to the
          external IdP.</td>
      </tr>

      <tr>
        <td><strong>Require signed assertions</strong></td>
        <td>Select this checkbox to enable the service provider to require that responses from the
        external IdP are signed</td>
      </tr>
    </table>

    ![Screenshot of the 'Configure' tab.
    At the top left is a dropdown labeled 'Plan' with the option 'dev-plan' selected.
    At the top right is an Auth Domain URL that is partly redacted.
    In the 'Configure SAML Service Provider' section there are selected checkboxes for
    'Perform signed authentication requests' and 'Require signed assertions'.
    Below that there are 'Save' and 'Download Metadata' buttons.](images/configure-saml-provider.png)

1. Click **Save** to save the configurations.

1. Click **Download Metadata**.


### <a id='config-ext-oidc'></a> Add an OIDC Provider

To add an external OIDC IdP:

1. Log in to the <%= vars.operator_dash %> at `https://p-identity.SYSTEM-DOMAIN` using your UAA admin
credentials.
You can find these credentials in your <%= vars.app_runtime_abbr %> tile in <%= vars.ops_manager %>
on the **Credentials** tab.

1. Click the plan name and navigate to the **Identity Providers** tab.

1. Click **Add IDP**.

1. Enter an **Identity Provider Name**. This name must match your origin key. However, you can replace
lowercase letters with capital letters and replace dashes with spaces. This name is displayed as a
link on the login page.

1. Enter an **Identity Provider Description**. This is the name of the group that the IdP
authenticates.
This description is displayed to the Space Developers when they select an IdP for their app.

1. Under **Identity Provider type**, select **OpenID Connect**.

1. Configure **OpenID Connect Settings**.
The following tabs expand to show instructions for using a discovery endpoint URL
to fetch the settings, or manually entering the OIDC settings:

    <style>
    .tab {
       overflow: hidden;
       border: 1px solid #ccc;
       background-color: #f1f1f1;
    }
    /* Style the buttons that are used to open the tab content */
    .tab button {
       background-color: inherit;
       float: left;
       border: inherit;
       outline: none;
       cursor: pointer;
       padding: ;
       transition: 0.3s;
    }
    /* Change background color of buttons on hover */
    .tab button:hover {
       background-color: #ddd;
    }
    /* Create an active/current tablink class */
    .tab button.active {
       background-color: #ccc;
    }
    /* Style the tab content */
    .tabcontent {
       display: none;
       padding: 6px 12px;
       border: 1px solid #ccc;
       border-top: none;
    }
    </style>

    <script>
    function openDocs(evt, docsName) {
       // Declare all variables
       var i, tabcontent, tablinks;
       // Get all elements with class="tabcontent" and hide them
       tabcontent = document.getElementsByClassName("tabcontent");
       for (i = 0; i < tabcontent.length; i++) {
           tabcontent[i].style.display = "none";
       }
       // Get all elements with class="tablinks" and remove the class "active"
       tablinks = document.getElementsByClassName("tablinks");
       for (i = 0; i < tablinks.length; i++) {
           tablinks[i].className = tablinks[i].className.replace(" active", "");
       }
       // Show the current tab, and add an "active" class to the button that opened the tab
       document.getElementById(docsName).style.display = "block";
       evt.currentTarget.className += " active";
    }
    </script>


    <div class="tab">
     <!- Tab headers and links ->
     <button class="tablinks active" onclick="openDocs(event, 'tab1')">Discover OIDC Configuration</button>
     <button class="tablinks" onclick="openDocs(event, 'tab2')">Manually Enter OIDC Configuration</button>
    </div>


    <div id="tab1" class="tabcontent" style="display:block">
      <img src="./images/discovery-url.png" alt="Pane for configuring a Discovery Endpoint URL.
       The Skip SSL validation checkbox is clear. The Discover OIDC configuration radio button is selected.
       The Manually enter OIDC configuration radio button is not selected.
       The Discovery Endpoint URL field shows https://example.com/.well-known/openid-configuration.
       The Relying Party OAuth Client ID field shows abc123.
       The Relying Party OAuth Client Secret field shows 6 asterisks.
       Under the Scopes heading is the FETCH SUPPORTED SCOPES button.
       The following checkboxes are all selected: email, offline_access, openid, and profile.">
      <ol>
        <li>(Optional) If you do not want to use SSL validation, select <strong>Skip SSL Validation</strong>.</li>
        <li>Select the <strong>Discover OIDC Configuration</strong> radio button.</li>

        <li>Configure the fields as follows:
          <table>
            <tr>
              <th>Field</th>
              <th>Instructions</th>
            </tr>

            <tr>
              <td><strong>Discovery Endpoint URL</strong></td>
              <td>Enter the discovery endpoint URL from the IdP metadata.</td>
            </tr>

            <tr>
              <td><strong>Relying Party OAuth Client ID</strong></td>
              <td>Enter the client ID from the IdP.</td>
            </tr>

            <tr>
              <td><strong>Relying Party OAuth Client Secret</strong></td>
              <td>Enter the client secret from the IdP.</td>
            </tr>
          </table>
        </li>
        <br>
        <li>Click <strong>Fetch Supported Scopes</strong> to retrieve the scopes supported by your OIDC provider.</li>
        <li>Select the <strong>Scopes</strong> that SSO will use during authentication.</li>
      </ol>
    </div>
    <div id="tab2" class="tabcontent">
      <img src="./images/manual-oidc-configuration.png" alt="Pane for manually configuring OIDC settings.
       The Skip SSL validation checkbox is clear. The Discover OIDC configuration radio button is not selected.
       The Manually enter OIDC configuration radio button is selected.
       The Authorization Endpoint field shows https://example.com/oauth2/v1/authorize.
       The Token Endpoint field shows https://example.com/oauth2/v1/token.
       The Token Key field shows https://example.com/oauth2/v1/keys.
       The Issuer (Optional) field shows https://example.com.
       The User Info Endpoint (Optional) field shows https://example.com/oauth2/v1/userinfo.
       The Response Type field shows code.
       The Relying Party OAuth Client ID field shows abc1223.
       The Relying Party Oauth Client Secret field shows 6 asterisks.
       Under the Scopes heading the openid checkbox is selected, the email is clear, and
       the profile checkbox is selected.">
      <ol>
        <li>(Optional) If you do not want to use SSL validation,
          select <strong>Skip SSL Validation</strong>.</li>
        <li>Select the <strong>Manually Enter OIDC Configuration</strong> radio button.</li>
        <li>Configure the fields as follows:
          <table>
            <tr>
              <th>Field</th>
              <th>Description</th>
            </tr>

            <tr>
              <td><strong>Authorization Endpoint URL</strong></td>
              <td>Enter the authorization endpoint URL from the IdP metadata.</td>
            </tr>

            <tr>
              <td><strong>Token Endpoint URL</strong></td>
              <td>Enter the token endpoint URL from the IdP metadata.</td>
            </tr>

            <tr>
              <td><strong>Token Key</strong></td>
              <td>Enter the token key URL or the token key value from the IdP metadata.</td>
            </tr>

            <tr>
              <td><strong>Issuer</strong> (Optional)</td>
              <td>If your IdP requires this field, enter a value.</td>
            </tr>

            <tr>
              <td><strong>User Info Endpoint URL</strong> (Optional)</td>
              <td>If your IdP requires this field, enter a value.</td>
            </tr>

            <tr>
              <td><strong>Response Type</strong></td>
              <td>Select the requested grant types from the dropdown.</td>
            </tr>

            <tr>
              <td><strong>Relying Party OAuth Client ID</strong></td>
              <td>Enter the client ID from the IdP.</td>
            </tr>

            <tr>
              <td><strong>Relying Party OAuth Client Secret</strong></td>
              <td>Enter the client secret from the IdP.</td>
            </tr>
          </table>
        </li>
        <br>
        <li>Select the applicable <strong>Scopes</strong> for your IdP</li>
      </ol>
    </div>

1. Enter **Email Domains**. This is a comma-separated list of domains for IdP discovery.


#### <a id='oidc-atts-maps'></a> (Optional) Configure User Attributes and External Group Mappings

To configure user attributes and external group mappings:

1. Under **Attribute & Group Mapping**, scroll to **User Attributes**.

1. Enter an <strong>OIDC Claim Name</strong> next to each corresponding attribute from the incoming
OIDC ID token.
They are sent to apps through OpenID tokens, along with any other stored user information issued by
<%= vars.product_short %>.

    ![Screenshot of the 'Attribute & Group Mapping' section.
    There are 'OIDC Claim Name' fields for 'email', 'user name', 'given name', 'family name',
    and 'phone number'](images/user-attributes-OIDC.png)

1. Under **Attribute & Group Mappings**, scroll to **External Group Mappings**.
After a Space Developer defines the resources required by an app, an admin can map existing groups
to those resources.

    For information about how Space Developers define resources, see
    [Create or Edit Resources](./manage-resources.html#create-resources).

    After resource permissions mappings are configured and a user authenticates, the user group
    memberships are mapped to scopes in the resulting token.

    You can configure external group mappings as follows:

    <table>
      <tr>
        <th>Field</th>
        <th>Instructions</th>
      </tr>
      <tr>
        <td><strong>OIDC Groups Claim Name</strong></td>
        <td>Enter the name of the claim in the external IdP's OIDC token which contains the list of group memberships.</td>
      </tr>
      <tr>
        <td>External Group Name</td>
        <td>Enter the group name that you defined in the external IdP.</td>
      </tr>
      <tr>
        <td>Permissions</td>
        <td>Search and select the SSO permissions that users in the external group should have access to.</td>
      </tr>
    </table>

    <p class="note">
      <strong>Note:</strong> Groups with unsupported characters in permissions mappings are not
      editable. Supported characters are alphanumeric characters, hyphens, and underscores.
    </p>

    <p class="note">
      <strong>Note:</strong>
      You can use the UAA API to automate the above procedure.
      To do this automation, you need an identity zone admin client.
      For instructions about creating the identity zone admin client, see
      <a href="./configure-id-providers-api.html#creating">Create a UAA Identity Zone Admin Client</a>.
      <br><br>
      For instructions about granting admin permissions to mapped external identity groups,
      see <a href="https://docs.cloudfoundry.org/uaa/uaa-user-management.html#external-group">
        Grant Admin Permissions to an External Group (SAML or LDAP)</a> in the Cloud Foundry documentation.
    </p>

1. Under **Attribute & Group Mappings**, scroll to **External Group Allowed List**.
An admin can include groups from an external IdP in a group allowlist.
The list of groups in the allowlist propagates into the `roles` claim of the ID token and the
`roles` key of the <code>/userinfo</code> endpoint response when a user authenticates using an
external IdP.

    <p class="note">
      <strong>Note:</strong> For an app to retrieve an ID token or a <code>/userinfo</code> response
      containing external groups, the app must request the <code>roles</code> claim and the group
      allowlist must include the external groups.
    </p>

    Select **Allow all groups**, **Do not allow any groups**, or **Select groups to allow** from
    the radio group.

    <table>
      <col style="width:40%">
      <col style="width:60%">
        <tr>
          <th>Field</th>
          <th>Description</th>
        </tr>
        <tr>
          <td><strong>Allow all groups</strong></td>
          <td>All groups appear in the <code>roles</code> claim of the ID token and the <code>roles</code> key of the <code>/userinfo</code> endpoint</td>
        </tr>
        <tr>
          <td><strong>Do not allow any groups</strong></td>
          <td>No groups appear in the <code>roles</code> claim of the ID token and the <code>roles</code> key of the <code>/userinfo</code> endpoint</td>
        </tr>
        <tr>
          <td><strong>Select groups to allow</strong></td>
          <td>Groups are rejected by default. Only groups matching the specified matchers are present in the <code>roles</code> claim of the ID token and the <code>roles</code> key of the
            <code>/userinfo</code> endpoint.
          To specify a matcher, choose a <strong>Match Type</strong>, then specify an <strong>Allowed External Group Name Pattern</strong> that matches group names in your Identity Provider.
          </td>
        </tr>
      </table>

1. Under **Attribute & Group Mappings**, scroll to **Custom Attributes** and configure the fields
as follows:

    <table>
      <tr>
        <th>Field</th>
        <th>Instructions</th>
      </tr>
      <tr>
      <td><strong>Custom Attributes</strong></td>
        <td>Enter any custom attributes to propagate from the IdP to the service provider. <br>
          They are sent to apps through OpenID tokens,
          along with any other stored user information issued by <%= vars.product_short %>.
          <ol>
            <li> (Optional) To expose custom user attributes through the <code>/userinfo</code> endpoint, select <strong>Persist Custom Attributes</strong>.
              Your app must also have the <code>user_attributes</code> scope assigned for the custom attributes to appear.</li>
            <li>Enter an <strong>SSO Attribute Name</strong>.</li>
            <li>Enter an <strong>IdP Attribute Name</strong> with the corresponding attribute from
              the incoming OIDC ID token.</li>
          </ol>
        </td>
      </tr>
    </table>

    ![Screenshot of the 'Custom Attributes' section.
    There is a selected 'Persist Custom Attributes' checkbox.
    Below that are 'SSO Attribute Name' and 'IdP Attribute Name' fields.
    At the bottom is a 'Add New Item' button.](images/custom-attributes.png)

1. Click **Save** to save the IdP.


### <a id='config-ext-ldap'></a> Add an LDAP Provider

When integrating <%= vars.product_short %> with a LDAP external IdP, authentication is chained.
An authentication attempt with user credentials is first attempted against the internal user store
before the external LDAP IdP.

When using an LDAP external IdP, you should not:

* **Bootstrap or Create Users in the UAA Database:** This can cause user collisions.
* **Enable Manual Lockouts:**
  For example, lockouts that result from users using the same account.
* **Enable Automated Deletions:**
  This can disrupt service accounts and prevent user logins.

VMware recommends that you do not reuse LDAP service accounts across environments.
You can only have one LDAP external IdP per service plan.

To add an LDAP IdP:

1. Log in to the <%= vars.operator_dash %> at `https://p-identity.SYSTEM-DOMAIN` using your UAA admin
credentials.
You can find these credentials in your <%= vars.app_runtime_full %> tile in <%= vars.ops_manager %>
on the **Credentials** tab.

1. Click the plan name and navigate to the **Identity Providers** tab.

1. Click **Add IDP**.

1. Enter an **Identity Provider Name**. This name is displayed as a link on the login page.

1. Enter an **Identity Provider Description**.
This description is displayed to the Space Developers when they select an IdP for their app.

1. Under **Identity Provider type**, select **LDAP**.
You can only have one LDAP provider per Service Plan.

1. Configure the fields as follows:

    <table>
      <tr>
        <th width=30%>Field</th>
        <th>Instructions</th>
      </tr>
      <tr>
        <th colspan="2" style="text-align: center;">Connection</th>
      </tr>
      <tr>
        <td><strong>Hostname</strong></td>
        <td>Enter the hostname for your LDAP server.</td>
      </tr>
      <tr>
        <td><strong>Port</strong></td>
        <td>Enter the port number for your LDAP server.</td>
      </tr>
      <tr>
        <td><strong>Security protocol</strong></td>
        <td>Select the security protocol that your LDAP uses for connection.</td>
      </tr>
      <tr>
        <td><strong>Referral</strong></td>
        <td>Select how UAA handles LDAP server referrals to other user stores.</td>
      </tr>
      <tr>
        <td><strong>User DN</strong></td>
        <td>Enter the LDAP Distinguished Name (DN) for binding to your LDAP server.</td>
      </tr>
      <tr>
        <td><strong>Bind Password</strong></td>
        <td>Enter the password for binding to your LDAP server.</td>
      </tr>
      <tr>
        <th colspan="2" style="text-align: center;">Users</th>
      </tr>
      <tr>
        <td><strong>Search Base</strong></td>
        <td>Enter the location in the LDAP directory tree where LDAP user search begins.
          The LDAP search base typically matches your domain name.</td>
      </tr>
      <tr>
        <td><strong>Search Filter</strong> (Optional)</td>
        <td>Enter a string to use for LDAP user search criteria. </td>
      </tr>
      <tr>
        <td><strong>Just in Time Provisioning</strong></td>
        <td>If this option is enabled, users are created at login time. <br>
          If this option is not enabled, users must be created before being able to log in</td>
      </tr>
      <tr>
        <th colspan="2" style="text-align: center;">Groups</th>
      </tr>
      <tr>
        <td><strong>Search Base</strong> (Optional)</td>
        <td>Enter the location in the LDAP directory tree where the LDAP group search begins.<br>
        To use the <strong>memberOf</strong> attribute on user objects,
        enter the value <code>memberOf</code> as the Search Base instead of
        an LDAP path for a group organizational unit.
        This causes <%= vars.product_short %> to ignore the <strong>Search Filter</strong> value.</td>
      </tr>
      <tr>
        <td><strong>Search filter</strong> (Optional)</td>
        <td>Enter a string that defines LDAP group search criteria.
          The standard value is <strong>member={0}</strong>.</td>
      </tr>
    </table>

    ![Screenshot of the 'Connection' and 'Users' configuration fields.
    The fields shown in the screenshot are listed in order in the table above.](images/ldap-connection.png)

1. Enter **Email Domains**. This is a comma-separated list of domains for IdP discovery.


#### <a id='ldap-atts-maps'></a> (Optional) Configure User Attributes and External Group Mappings

To configure user attributes and external group mappings:

1. Under **Attribute & Group Mappings**, scroll to **User Attributes**.

1. Enter an <strong>LDAP Field Name</strong> next to each corresponding User Schema Attribute.
They are sent to apps through OpenID tokens, along with any other stored user information issued by
<%= vars.product_short %>.

    ![Screenshot of the 'Attribute & Group Mapping' section.
    There are 'LDAP Field Name' fields for 'given name', 'family name', and 'phone number'](images/user-attributes-LDAP.png)

1. Under **Attribute & Group Mappings**, scroll to **External Group Mappings**.
After a Space Developer defines the resources required by an app, an admin can map existing groups
to those resources.

    For information about how Space Developers define resources, see
    [Create or Edit Resources](./manage-resources.html#create-resources).

    After resource permissions mappings are configured and a user authenticates, the user group
    memberships are mapped to scopes in the resulting token.

    You can configure external group mappings as follows:

    <table>
      <tr>
        <th>Field</th>
        <th>Instructions</th>
      </tr>
      <tr>
        <td>External Group Name</td>
        <td>Enter the fully qualified LDAP paths.
        The path uses this format: <code>cn=XXX-group,ou=users,o=YYY,dc=ZZZ,dc=com</code>.</td>
      </tr>
      <tr>
        <td>Permissions</td>
        <td>Search and select the SSO permissions that users in the external group should have access to.</td>
      </tr>
    </table>

    <p class="note">
      <strong>Note:</strong> Groups with unsupported characters in permissions mappings are not
      editable. Supported characters are alphanumeric characters, hyphens, and underscores.
    </p>

    <p class="note">
      <strong>Note:</strong> You can use the UAA API to automate the above procedure.
      To do this automation, you need an identity zone admin client.
      For instructions about creating the identity zone admin client, see
      <a href="./configure-id-providers-api.html#creating">Create a UAA Identity Zone Admin Client</a>.
      <br><br>

      For instructions about granting admin permissions to mapped external identity groups,
      see <a href="https://docs.cloudfoundry.org/uaa/uaa-user-management.html#external-group">
        Grant Admin Permissions to an External Group (SAML or LDAP)</a> in the Cloud Foundry documentation.
    </p>

1. Under **Attribute & Group Mappings**, scroll to **External Group Allowed List**.
An admin can include groups from an external IdP in a group allowlist.
The list of groups in the allowlist propagates into the `roles` claim of the ID token and and the
`roles` key of the <code>/userinfo</code> endpoint response when a user authenticates using an
external IdP.

    <p class="note">
      <strong>Note:</strong> For an app to retrieve an ID token or a <code>/userinfo</code> response
      containing external groups, the app must request the <code>roles</code> claim and the group
      allowlist must include the external groups.
    </p>

    Select **Allow all groups**, **Do not allow any groups**, or **Select groups to allow**
    from the radio group.

    <table>
      <col style="width:40%">
      <col style="width:60%">
      <tr>
        <th>Field</th>
        <th>Description</th>
      </tr>
      <tr>
        <td><strong>Allow all groups</strong></td>
        <td>All groups appear in the <code>roles</code> claim of the ID token and the
          <code>roles</code> key of the <code>/userinfo</code> endpoint</td>
      </tr>
      <tr>
        <td><strong>Do not allow any groups</strong></td>
        <td>No groups appear in the <code>roles</code> claim of the ID token and the
          <code>roles</code> key of the <code>/userinfo</code> endpoint</td>
      </tr>
      <tr>
        <td><strong>Select groups to allow</strong></td>
        <td>Groups are rejected by default. Only groups matching the specified matchers are present in
          the <code>roles</code> claim of the ID token and the <code>roles</code> key of the
          <code>/userinfo</code> endpoint.
        To specify a matcher, choose a <strong>Match Type</strong>, then specify an
        <strong>Allowed External Group Name Pattern</strong> that matches group names in your Identity
        Provider.
        </td>
      </tr>
    </table>

1. Under **Attribute & Group Mappings**, scroll to **Custom Attributes** and configure the
fields as follows:

    <table>
      <tr>
        <th>Field</th>
        <th>Instructions</th>
      </tr>
      <tr>
        <td><strong>Custom Attributes</strong></td>
        <td>Enter any custom attributes to propagate from the IdP to the service provider. <br>
          They are sent to apps through OpenID tokens,
          along with any other stored user information issued by <%= vars.product_short %>.
          <ol>
            <li> (Optional) To expose custom user attributes through the <code>/userinfo</code> endpoint, select <strong>Persist Custom Attributes</strong>.
              Your app must also have the <code>user_attributes</code> scope assigned for the custom attributes to appear.</li>
            <li>Enter an <strong>SSO Attribute Name</strong>.</li>
            <li>Enter an <strong>IdP Attribute Name</strong> with the corresponding attribute from LDAP.</li>
          </ol>
        </td>
      </tr>
    </table>

    ![Screenshot of the 'Custom Attributes' section.
    There is a selected 'Persist Custom Attributes' checkbox.
    Below that are 'SSO Attribute Name' and 'IdP Attribute Name' fields.
    At the bottom is a 'Add New Item' button.](images/custom-attributes.png)

1. Click **Save** to save the IdP.


### <a id='delete-idp'></a> Delete an External Identity Provider

<p class="note warning">
  <strong>Note:</strong> Deleting an external IdP deletes all of its configurations.
  This prevents users from authenticating through the external IdP.
  You cannot undo this action.
</p>

To delete an external IdP:

1. Log in to the <%= vars.operator_dash %> at `https://p-identity.SYSTEM-DOMAIN` using your UAA admin
credentials.
You can find these credentials in your <%= vars.app_runtime_abbr %> tile in <%= vars.ops_manager %>
on the **Credentials** tab.

1. Click the plan name and navigate to the **Identity Providers** tab.

1. Click on the name of your external IdP.

1. Click **Delete** at the bottom of the page.

1. In the dialog box that appears, click **Delete Identity Provider** to
confirm that you want to delete the IdP, along with all of its configurations.


## <a id='mapping-allowlist'></a> Transfer Group Membership and Roles

You can use the <%= vars.operator_dash %> to configure resource permissions mappings and group
allowlists to transfer group membership and roles from existing IdP groups to
<%= vars.product_short %>.


### <a id='delete-resource-perm'></a> Delete Resource Permissions Mappings

To delete resource permissions mappings:

1. Log in to the <%= vars.operator_dash %> at `https://p-identity.SYSTEM-DOMAIN` using your UAA
admin credentials.
You can find these credentials in your <%= vars.app_runtime_abbr %> tile in <%= vars.ops_manager %>
on the **Credentials** tab.

1. Click the plan name and navigate to the **Identity Providers** tab.

1. Click on the name of the external IdP you want to delete permissions for and scroll to the
**External Group Mapping** section.

1. Click the trash can icon next to the group name whose resource permissions mappings you want to
delete.

1. Click **Save** at the bottom of the page.

<p class="note">
  <strong>Note:</strong> Groups with unsupported characters in permissions mappings are not editable.
  Supported characters are alphanumeric characters, hyphens, and underscores.
</p>

<p class="note">
  <strong>Note:</strong> You can use the UAA API to automate the above procedure.
  To do this automation, you need an identity zone admin client.
  For instructions about creating the identity zone  admin client, see
  <a href="./configure-id-providers-api.html#creating">Create a UAA Identity Zone Admin Client</a>.<br><br>
  For information about un-mapping a group mapping,
  see <a href="http://docs.cloudfoundry.org/api/uaa/version/74.4.0/index.html#unmap">Unmap</a> in the
  UAA API documentation.
</p>


## <a id='testing-identity-provider-configurations'></a> Test Identity Provider Configurations

VMware provides sample apps you can deploy to validate your IdP configurations.

To deploy a sample app, see [identity-sample-apps](https://github.com/pivotal-cf/identity-sample-apps)
in GitHub.
