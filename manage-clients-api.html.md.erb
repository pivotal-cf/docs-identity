---
title: Managing Clients with UAAC
owner: Identity Service
---

This topic explains how plan administrators use the User Account and Authentication Command Line Interface (UAAC)
to manage existing UAA Identity Zone clients.

##<a id="about"></a> About Managing Clients with UAAC

This section explains when and why you use the UAAC to update UAA Identity Zone clients.

All clients mentioned on this page are UAA Identity Zone clients.
However, there are two kinds of UAA Identity Zone clients:

+ **Non-Admin clients**—When app developers configure their apps to use the Single Sign-On (SSO) service,
    each app corresponds to a non-admin client for an SSO service plan.
+ **Admin clients**—These can modify other clients and are created
  by completing the procedure below.
  See [Create an Admin Client](#creating).

###<a id="when-not"></a>When Not to Use UAAC

Do not use the UAAC to do the following:

+ Create clients—Do not create clients through UAAC because additional metadata is required for their usage by SSO.

+ Make most types of updates—Most updates for UAA Identity Zone clients can be made through the SSO Developer Dashboard.

###<a id="when-not"></a>When to Use UAAC

Some updates cannot be done through the SSO Developer Dashboard and so must be made through the UAAC.
You need to use the UAAC if you want to:

+ Add multiple grant types. The SSO Developer Dashboard only allows one grant type per client.

+ Set a configuration to a value that is not listed on the SSO Developer Dashboard.

## <a id="creating"></a> Create an Admin Client

To use the UAAC to modify clients, you need an admin client that corresponds to your SSO service plan.

If you do not already have an admin client for your UAA Identity Zone,
follow the steps below to create an admin client.

<p class="note"><strong>Note:</strong>
You can use the same admin client for updating service plans and identity providers.
For information, see <a href="./manage-service-plans-api.html">Updating Service Plans with UAAC</a> and
<a href="./configure-id-providers-api.html">Updating Identity Providers with UAAC</a>.
</p>

1. Target your Pivotal Cloud Foundry (PCF) deployment using `cf`.
1. Target an org and space that your service plan is visible in.
1. If you have not already created a service instance for your service plan, create one now.
   For how to create an instance, see [Create a Service Instance](./manage-service-instances.html#create-svc-instance).
   The service instance exposes the SSO Developer Dashboard.
1. Log in to the SSO Developer Dashboard as an administrator.
   You can find the dashboard URL by using Apps Manager or `cf service SERVICE-INSTANCE-NAME`.
1. Click **New App**.
1. Enter an **App Name**.
1. Under **Select an Application Type**, select **Service-to-Service App**.
1. Click **Select Scopes** > **Admin Permissions**.

    Set the scopes as necessary for configuring the UAA resource.

    <table>
      <tr>
        <th>For…</th>
        <th>Add these scopes…</th>
        <th>For more information, see…</th>
      </tr>
      <tr>
        <td>updating UAA clients</td>
        <td><code>clients.admin</code></td>
        <td><a href="#updating">Update Clients with UAAC</a> below.</td>
      </tr>
      <tr>
        <td>managing SSO service plans</td>
        <td><code>clients.admin</code></td>
        <td><a href="./manage-service-plans-api.html">Updating Service Plans with UAAC</a>.</td>
      </tr>
      <tr>
        <td>updating identity providers</td>
        <td><code>idps.read</code> and <code>idps.write</code></td>
        <td><a href="./configure-id-providers-api.html">Updating Identity Providers with UAAC</a>.</td>
      </tr>
    </table>

1. Record the **App ID** and **App Secret**.

## <a id="updating"></a> Update Clients with UAAC

Use the UAAC to update a client to have multiple grant types
or set a special value that is not available on the SSO Developer Dashboard.

The example shown here adds the `client credentials` grant type
and the corresponding client credentials `authorities` to an existing web-app
configured via SSO Developer Dashboard.

1. Install the UAAC.
    <pre class="terminal">
    $ gem install cf-uaac
    </pre>


1. To target your service plan, run the following command:

    ```
    uaac target AUTH-DOMAIN
    ```

    Where `AUTH-DOMAIN` is the tenant-specific URL at which the service plan is accessible.

    For example:

    <pre class="terminal">$ uaac target my-auth-domain.login.example.com  </pre>


1. To authenticate and obtain an access token for the admin client for your service plan,
run the following command:

    ```
    uaac token client get ADMIN-APP-ID -s ADMIN-APP-SECRET
    ```

    Where:
    * `ADMIN-APP-ID` is the App ID.
    * `ADMIN-APP-SECRET` is the App Secret.

    Use the App ID and App Secret that you created in
      [Create a UAA Identity Zone Admin Client](#creating) above.
    For example:

    <pre class="terminal">$ uaac token client get MyAdminAppId -s MyAdminAppSecret </pre>

     UAAC stores the token in  `~/.uaac.yml`.


1. To display the client context, run the following command:

    ```
    uaac context
    ```

    For example:

    <pre class="terminal">
    $ uaac context

    [1]*[admin]
        client\_id: MyAdminAppId
        access\_token: aBcdEfg0hIJKlm123.e
        token\_type: bearer
        expires\_in: 43200
        scope: clients.admin
        jti: 91b3-abcd1233
    </pre>

1. Verify that you have the `clients.admin` permissions in the `scope` section.

1. To obtain the existing configurations of the client, run the following command:


    ```
    uaac client get MY-WEB-APP-ID
    ```

    Where `MY-WEB-APP-ID` is your web app's App ID. You can obtain this in the SSO Developer Dashboard.<br><br>

    For example:
    <pre class="terminal">
     $ uaac client get MyWebAppId

     scope: openid
     client\_id: MyWebAppId
     resource\_ids: none
     authorized\_grant\_types: authorization\_code refresh\_token
     redirect\_uri: https<span>:</span>//example.com
     access\_token\_validity: 43200
     refresh\_token\_validity: 2592000
     authorities: uaa.resource
     name: test-update
     allowedproviders: uaa google
     type: WEB
     space\_guid: ebd0b512-d94c-49c3-87da-2766e3397a44
     lastmodified: 1529517126000
     created\_by: e10c59d4-8fa4-4905-9ce5-d27e5163f455
    </pre>

1. Confirm that in the output, `client_id` is the value of your web app ID.



1. To update the client configuration, pass in flags with the following command:

    ```
    uaac client update MY-WEB-APP-ID --PROPERTY-1 VALUE-1,VALUE-2 --PROPERTY-N VALUE-N
    ```

    Where:
    * `PROPERTY-N`'s are from the list returned in step 6 above, for example, `redirect_uri`.
    * `VALUE-N`'s are the configurations you want the client to have.

    For example:

    <pre class="terminal">
     $ uaac client update MyWebAppId \
       --authorized_grant_types \
       authorization_code,refresh_token,client_credentials \
       --authorities todo.read,todo.write
    </pre>

    The example specifies grant types of `authorization_code` for the web app and respecifies
   the existing grant types.
    The example also replaces the `uaa.resource` authority with `todo.read` and `todo.write`.
    The client now has the ability to access `todo.read` and `todo.write` when acting on its own behalf.

1. In the output from the command, verify that your client has the updates you expect.

    In this case, the additional grant types and `todo.read` and `todo.write` authorities.
    <pre class="terminal">
     scope: openid
      client\_id: MyWebAppId
      resource\_ids: none
      authorized\_grant\_types: client\_credentials authorization\_code refresh\_token
      redirect\_uri: https<span>:</span>//google.com
      access\_token\_validity: 43200
      refresh\_token\_validity: 2592000
      authorities: todo.read todo.write
      name: test-update
      allowedproviders: uaa google
      type: WEB
      space\_guid: ebd0b512-d94c-49c3-87da-2766e3397a44
      required\_user\_groups:
      lastmodified: 1529518941000
      created\_by: e10c59d4-8fa4-4905-9ce5-d27e5163f455
    </pre>
